{"version":3,"sources":["store/types.ts","store/selectors.ts","store/actions.ts","api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","store/store.ts","index.tsx"],"names":["ActionType","getTodosSelector","state","todos","selectUserIdSelector","selectUserId","getUserSelector","user","selectUserIdAction","payload","type","SelectUserId","request","url","fetch","then","res","json","TodoList","useState","query","setQuery","selectedActivities","setSelectedActivities","useSelector","dispatch","useDispatch","selectedUserId","useEffect","AddTodos","filterTodos","useMemo","filter","todo","todoTitleToLowerCase","title","toLowerCase","queryToLowerCase","includes","completed","className","placeholder","value","onChange","event","target","disabled","selected","map","classnames","readOnly","checked","userId","onClick","id","CurrentUser","selectedUser","LoadUserById","username","email","phone","App","initialState","store","createStore","action","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9022dcdc.chunk.js","sourcesContent":["import { Action as BaseAction } from 'redux';\nimport { Todo, User } from '../react-app-env';\n\nexport interface State {\n  todos: Todo[],\n  selectUserId: number,\n  user: User | null,\n}\n\nexport interface Action<T, P> extends BaseAction<T> {\n  payload: P,\n}\n\nexport enum ActionType {\n  AddTodos = 'AddTodos',\n  SelectUserId = 'SelectUserId',\n  LoadUserById = 'LoadUserById',\n}\n\nexport type AddTodosAction = Action<ActionType.AddTodos, Todo[]>;\nexport type SelectUserIdAction = Action<ActionType.SelectUserId, number>;\nexport type LoadUserByIdAction = Action<ActionType.LoadUserById, User>;\n\nexport type Actions = AddTodosAction | SelectUserIdAction | LoadUserByIdAction;\n","import { Todo } from '../react-app-env';\nimport { State } from './types';\n\nexport const getTodosSelector = (state: State): Todo[] => state.todos;\nexport const selectUserIdSelector = (state: State) => state.selectUserId;\nexport const getUserSelector = (state: State) => state.user;\n","import { Todo, User } from '../react-app-env';\nimport {\n  ActionType, AddTodosAction, LoadUserByIdAction, SelectUserIdAction,\n} from './types';\n\nexport const addTodosActionCreator = (payload: Todo[]): AddTodosAction => ({\n  type: ActionType.AddTodos,\n  payload,\n});\n\nexport const selectUserIdAction = (payload: number): SelectUserIdAction => ({\n  type: ActionType.SelectUserId,\n  payload,\n});\n\nexport const addUserAction = (payload: User): LoadUserByIdAction => ({\n  type: ActionType.LoadUserById,\n  payload,\n});\n","import { User } from './react-app-env';\n\nconst BASE_URL = 'https://mate.academy/students-api/';\n\nexport const request = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(res => res.json());\n};\n\nexport const getTodos = () => {\n  return request('todos');\n};\n\nexport const getUsersById = (userId: number): Promise<User> => {\n  return request(`users/${userId}`);\n};\n","import React, { useEffect, useMemo, useState } from 'react';\nimport classnames from 'classnames';\nimport './TodoList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodosSelector, selectUserIdSelector } from '../../store/selectors';\nimport { addTodosActionCreator, selectUserIdAction } from '../../store/actions';\nimport { getTodos } from '../../api';\n\nexport const TodoList: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [selectedActivities, setSelectedActivities] = useState('');\n\n  const todos = useSelector(getTodosSelector);\n  const dispatch = useDispatch();\n  const selectUserId = (id: number) => dispatch(selectUserIdAction(id));\n  const selectedUserId = useSelector(selectUserIdSelector);\n\n  useEffect(() => {\n    getTodos()\n      .then(res => dispatch(addTodosActionCreator(res)));\n  }, []);\n\n  const filterTodos = useMemo(() => (\n    todos.filter(todo => {\n      const todoTitleToLowerCase = todo.title.toLowerCase();\n      const queryToLowerCase = query.toLowerCase();\n\n      return todoTitleToLowerCase.includes(queryToLowerCase);\n    })\n      .filter(todo => {\n        switch (selectedActivities) {\n          case 'active':\n            return !todo.completed;\n          case 'completed':\n            return todo.completed;\n          case 'select all':\n            return todo;\n          default:\n            return todo;\n        }\n      })\n  ), [query, todos, selectedActivities]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>\n        Todos:\n      </h2>\n\n      <div className=\"TodoList__list-container\">\n        <input\n          type=\"text\"\n          placeholder=\"search\"\n          value={query}\n          onChange={(event) => setQuery(event.target.value)}\n        />\n        <select\n          onChange={\n            (event) => setSelectedActivities(event.target.value)\n          }\n        >\n          <option\n            value=\"0\"\n            disabled\n            selected\n          >\n            select activities\n          </option>\n          <option>\n            active\n          </option>\n          <option>\n            completed\n          </option>\n          <option>\n            select all\n          </option>\n        </select>\n        <ul className=\"TodoList__list\">\n          {filterTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classnames('TodoList__item', (todo.completed\n                ? 'TodoList__item--checked'\n                : 'TodoList__item--unchecked'\n              ))}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>\n                  {todo.title}\n                </p>\n              </label>\n\n              <button\n                type=\"button\"\n                className={classnames(\n                  'TodoList__user-button button',\n                  {\n                    'TodoList__user-button--selected':\n                   selectedUserId === todo.userId,\n                  },\n                  'button',\n                )}\n                onClick={() => {\n                  selectUserId(todo.userId);\n                }}\n              >\n                User&nbsp;\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUsersById } from '../../api';\nimport { addUserAction, selectUserIdAction } from '../../store/actions';\nimport { getUserSelector, selectUserIdSelector } from '../../store/selectors';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const selectedUser = useSelector(getUserSelector);\n  const selectedUserId = useSelector(selectUserIdSelector);\n\n  useEffect(() => {\n    getUsersById(selectedUserId)\n      .then(user => dispatch(addUserAction(user)));\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          {`Selected user: ${selectedUser?.id}`}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{selectedUser?.username}</h3>\n      <p className=\"CurrentUser__email\">{selectedUser?.email}</p>\n      <p className=\"CurrentUser__phone\">{selectedUser?.phone}</p>\n      <button\n        className=\"TodoList__user-button button\"\n        type=\"button\"\n        onClick={() => {\n          dispatch(selectUserIdAction(0));\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { selectUserIdSelector } from './store/selectors';\n\nconst App: React.FC = () => {\n  const selectedUserId = useSelector(selectUserIdSelector);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId\n            ? (\n              <CurrentUser />\n            ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { createStore, Reducer, Store } from 'redux';\nimport { Actions, ActionType, State } from './types';\n\nconst initialState: State = {\n  todos: [],\n  selectUserId: 0,\n  user: null,\n};\n\nconst reducer: Reducer<State, Actions> = (\n  state: State = initialState, action,\n): State => {\n  switch (action.type) {\n    case ActionType.AddTodos:\n      return {\n        ...state,\n        todos: [...state.todos, ...action.payload],\n      };\n    case ActionType.SelectUserId:\n      return {\n        ...state,\n        selectUserId: action.payload,\n      };\n    case ActionType.LoadUserById:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store: Store<State, Actions> = createStore(reducer);\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store/store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(\n  <Root />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}